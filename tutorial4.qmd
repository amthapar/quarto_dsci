---
title: "tutorial4.qmd"
editor: visual
---

# Tutorial #4 {.unnumbered}


#Type the code below in the console. Ignore the number listed to the left of the code.


\* Be able to explore a dataset using basic Base R functions.

\* Be able to recognize and correct Common Errors from R 

\* Understand Coding Etiquette


## Errors, warnings, and messages {#sec-intro-errors}
One thing that intimidates new R and RStudio users is how it reports errors, warnings, and messages. R reports errors, warnings, and messages in a glaring red font, which makes it seem like it is scolding you. However, seeing red text in the console is not always bad.

R will show red text in the console pane in three different situations:

Errors: When the red text is a legitimate error, it will be prefaced with “Error in…” and will try to explain what went wrong. Generally when there’s an error, the code will not run. For example, we’ll see in Subsection 1.3.3 if you see Error in ggplot(...) : could not find function "ggplot", it means that the ggplot() function is not accessible because the package that contains the function (ggplot2) was not loaded with library(ggplot2). Thus you cannot use the ggplot() function without the ggplot2 package being loaded first.
Warnings: When the red text is a warning, it will be prefaced with “Warning:” and R will try to explain why there’s a warning. Generally your code will still work, but with some caveats. For example, you will see in Chapter 2 if you create a scatterplot based on a dataset where two of the rows of data have missing entries that would be needed to create points in the scatterplot, you will see this warning: Warning: Removed 2 rows containing missing values (geom_point). R will still produce the scatterplot with all the remaining non-missing values, but it is warning you that two of the points aren’t there.
Messages: When the red text doesn’t start with either “Error” or “Warning”, it’s just a friendly message. You’ll see these messages when you load R packages in the upcoming Subsection 1.3.2 or when you read data saved in spreadsheet files with the read_csv() function as you’ll see in Chapter 4. These are helpful diagnostic messages and they don’t stop your code from working. Additionally, you’ll see these messages when you install packages too using install.packages() as discussed in Subsection 1.3.1.
Remember, when you see red text in the console, don’t panic. It doesn’t necessarily mean anything is wrong. Rather:

If the text starts with “Error”, figure out what’s causing it. Think of errors as a red traffic light: something is wrong!
If the text starts with “Warning”, figure out if it’s something to worry about. For instance, if you get a warning about missing values in a scatterplot and you know there are missing values, you’re fine. If that’s surprising, look at your data and see what’s missing. Think of warnings as a yellow traffic light: everything is working fine, but watch out/pay attention.
Otherwise, the text is just a message. Read it, wave back at R, and thank it for talking to you. Think of messages as a green traffic light: everything is working fine and keep on going!

## Tips on learning to code {#sec-intro-tips_coding}
Learning to code/program is quite similar to learning a foreign language. It can be daunting and frustrating at first. Such frustrations are common and it is normal to feel discouraged as you learn. However, just as with learning a foreign language, if you put in the effort and are not afraid to make mistakes, anybody can learn and improve.

Here are a few useful tips to keep in mind as you learn to program:

Remember that computers are not actually that smart: You may think your computer or smartphone is “smart,” but really people spent a lot of time and energy designing them to appear “smart.” In reality, you have to tell a computer everything it needs to do. Furthermore, the instructions you give your computer can’t have any mistakes in them, nor can they be ambiguous in any way.
Take the “copy, paste, and tweak” approach: Especially when you learn your first programming language or you need to understand particularly complicated code, it is often much easier to take existing code that you know works and modify it to suit your ends. This is as opposed to trying to type out the code from scratch. We call this the “copy, paste, and tweak” approach. So early on, we suggest not trying to write code from memory, but rather take existing examples we have provided you, then copy, paste, and tweak them to suit your goals. After you start feeling more confident, you can slowly move away from this approach and write code from scratch. Think of the “copy, paste, and tweak” approach as training wheels for a child learning to ride a bike. After getting comfortable, they won’t need them anymore.
The best way to learn to code is by doing: Rather than learning to code for its own sake, we find that learning to code goes much smoother when you have a goal in mind or when you are working on a particular project, like analyzing data that you are interested in and that is important to you.
Practice is key: Just as the only method to improve your foreign language skills is through lots of practice and speaking, the only method to improving your coding skills is through lots of practice. Don’t worry, however, we’ll give you plenty of opportunities to do so!



## Unused Text

Everything that exists in R must be represented somehow. A generic term for something that we know not much about is an object. In R, we can distinguish between two main types of objects:

1. **data objects** are typically passive containers for values (e.g., numbers, truth values, or strings of text), whereas

2. **function objects** are active elements or tools: They do things with data.


Mastering R (or any other programming language) essentially consists of solving two inter-related tasks:

1. Representing various types of data as objects.

2. Manipulating those objects by using functions.

For any data object, we distinguish between its type and its shape. The shape of an object mostly depends on its structure. As this chapter uses only a single data structure (i.e., vectors), we will address issues of data shape later (in Chapter 3 on Data structures).

Here, we focus on data types (which are also described as data modes in R). Throughout this book, we will work with the following data types:

logical values (aka. Boolean values, of type logical)
numbers (of type integer or double)
text or string data (of type character)
dates and times (with various data types)

We already defined objects of type “integer”, “double”, “character” and “logical” above. 

Functions


In general, we need to use parentheses to evaluate a function. If you type ls, the function is not evaluated and instead R shows you the code that defines the function. If you type ls() the function is evaluated and, as seen above, we see objects in the workspace.

Unlike ls, most functions require one or more arguments. Below is an example of how we assign an object to the argument of the function log. Remember that we earlier defined a to be 1:


TEST - DID THIS WORK

Here is the material for this chapter

R Basics

Function help is always organised in the same way. For example, look at the help for \`?beepr::beep\`. At the top, it tells you the name of the function and its package in curly brackets, then a short description of the function, followed by a longer description. The \*\*Usage\*\* section shows the function with all of its \`r glossary("argument", "arguments")\`. If any of those arguments have default values, they will be shown like \`function(arg = default)\`. The \*\*Arguments\*\* section lists each argument with an explanation. There may be a \*\*Details\*\* section after this with even more detail about the functions. The \*\*Examples\*\* section is last, and shows examples that you can run in your console window to see how the function works.

::: {.callout-note .try style="clear: both;"}
\## Function Help

\- What is the first argument to the \`mean\` function? \`r mcq(c("trim", "na.rm", "mean", answer="x"))\`

\- What package is \`read_excel\` in? \`r mcq(c("readr", answer="readxl", "base", "stats"))\`
:::

\### Arguments

You can look up the arguments/options that a function has by using the help documentation. Some arguments are required, and some are optional. Optional arguments will often use a default (normally specified in the help documentation) if you do not enter any value.

As an example, look at the help documentation for the function \`sample()\` which randomly samples items from a list.

\`\`\`{r help-doc, eval=FALSE, filename = "Run in the console"}

?sample

\`\`\`

The help documentation for \`sample()\` should appear in the bottom right help panel. In the usage section, we see that \`sample()\` takes the following form:

\`\`\`{r arguments, eval = FALSE}

sample(x, size, replace = FALSE, prob = NULL)

\`\`\`

In the arguments section, there are explanations for each of the arguments. \`x\` is the list of items we want to choose from, \`size\` is the number of items we want to choose, \`replace\` is whether or not each item may be selected more than once, and \`prob\` gives the probability that each item is chosen. In the details section it notes that if no values are entered for \`replace\` or \`prob\` it will use defaults of \`FALSE\` (each item can only be chosen once) and \`NULL\` (all items will have equal probability of being chosen). Because there is no default value for \`x\` or \`size\`, they must be specified otherwise the code won't run.

Let's try an example and just change the required arguments to \`x\` and \`size\` to ask R to choose 5 random letters (\`letters\` is a built-in \`r glossary("vector")\` of the 26 lower-case Latin letters).

\`\`\`{r, echo = FALSE}

\# make sure values are the same

set.seed(1242016)

\`\`\`

\`\`\`{r rnorm-n}

sample(x = letters, size = 5)

\`\`\`

::: {.callout-note collapse="true"}
\## Why are my letters different to your letters?

\`sample()\` generates a random sample. Each time you run the code, you'll generate a different set of random letters (try it). The function \`set.seed()\` controls the random number generator - if you're using any functions that use randomness (such as \`sample()\`), running \`set.seed()\` will ensure that you get the same result (in many cases this may not be what you want to do). To get the same numbers we do, run \`set.seed(1242016)\` in the console, and then run \`sample(x = letters, size = 5)\` again.
:::

Now we can change the default value for the \`replace\` argument to produce a set of letters that is allowed to have duplicates.

\`\`\`{r}

set.seed(8675309)

sample(x = letters, size = 5, replace = TRUE)

\`\`\`

This time R has still produced 5 random letters, but now this set of letters has two instances of "k". Always remember to use the help documentation to help you understand what arguments a function requires.

\### Argument names

In the above examples, we have written out the argument names in our code (i.e., \`x\`, \`size\`, \`replace\`), however, this is not strictly necessary. The following two lines of code would both produce the same result (although each time you run \`sample()\` it will produce a slightly different result, because it's random, but they would still work the same):

\`\`\`{r argument-names, eval = FALSE}

sample(x = letters, size = 5, replace = TRUE)

sample(letters, 5, TRUE)

\`\`\`

Importantly, if you do not write out the argument names, R will use the default order of arguments. That is, for \`sample\` it will assume that the first value you enter is \`x\`, the second value is \`size\` and the third value is \`replace\`.

If you write out the argument names, then you can write the arguments in whatever order you like:

\`\`\`{r argument-order, eval = FALSE}

sample(size = 5, replace = TRUE, x = letters)

\`\`\`

When you are first learning R, you may find it useful to write out the argument names as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see code examples online that do not use argument names, so it is important to be able to understand which argument each bit of code is referring to (or look up the help documentation to check).

In this course, we will always write out the argument names the first time we use each function. However, in subsequent uses they may be omitted.

\### Tab auto-complete

One very useful feature of R Studio is tab auto-complete for functions. If you write the name of the function and then press the tab key, R Studio will show you the arguments that function takes along with a brief description. If you press enter on the argument name it will fill in the name for you, just like auto-complete on your phone. This is incredibly useful when you are first learning R and you should remember to use this feature frequently.

\`\`\`{r fig-autocomplete, echo=FALSE, fig.cap="Tab auto-complete"}

#knitr::include_graphics("images/intro/autocomplete.png")

\`\`\`

\## Objects {#sec-objects}

A large part of your coding will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of operations and analyses. You assign content to an object using \`\<-\`.

Run the following code in the console, but change the values of \`name\` and \`age\` to your own details and change \`christmas\` to a holiday or date you care about.

\`\`\`{r objects, filename = "Run in the console"}

name \<- "Emily"

age \<- 36

today \<- Sys.Date()

christmas \<- as.Date("2023-12-25")

\`\`\`

You'll see that four objects now appear in the environment pane:

\- \`name\` is \`r glossary("character")\` (text) data. In order for R to recognise it as text, it \*\*must\*\* be enclosed in double quotation marks \`" "\`.

\- \`age\` is \`r glossary("numeric")\` data. In order for R to recognise this as a number, it \*\*must not\*\* be enclosed in quotation marks.

\- \`today\` stores the result of the function \`Sys.Date()\`. This function returns your computer system's date. Unlike \`name\` and \`age\`, which are hard-coded (i.e., they will always return the values you enter), the contents of the object \`today\` will change dynamically with the date. That is, if you run that function tomorrow, it will update the date to tomorrow's date.

\- \`christmas\` is also a date but it's hard-coded as a specific date. It's wrapped within the \`as.Date()\` function that tells R to interpret the character string you provide as a date rather than text.

::: {.callout-note .try}
To print the contents of an object, type the object's name in the console and press enter. Try printing all four objects now.
:::

Finally, a key concept to understand is that objects can interact and you can save the results of those interactions in new object. Edit and run the following code to create these new objects, and then print the contents of each new object.

\`\`\`{r intro-objects, filename = "Run in the console"}

decade \<- age + 10

full_name \<- paste(name, "Nordmann")

how_long \<- christmas - today

\`\`\`

\## Getting help {#sec-help}

You will feel like you need a \*lot\* of help when you're starting to learn. This won't really go away; it's impossible to memorise everything. The goal is to learn enough about the structure of R that you can look things up quickly. This is why we'll introduce specialised jargon in the glossary for each chapter; it's easier to google "convert \`r glossary("character")\` to \`r glossary("numeric")\` in R" than "make numbers in quotes be actual numbers not words". In addition to the function help described above, here's some additional resources you should use often.

\### Package reference manuals

Start up help in a browser by entering \`help.start()\` in the console. Click on \<if\>Packages\</if\> under \<if\>Reference\</if\> to see a list of packages. Scroll down to the \<pkg\>readxl\</pkg\> package and click on it to see a list of the functions that are available in that package.

\### Googling

If the function help doesn't help, or you're not even sure what function you need, try Googling your question. It will take some practice to be able to use the right jargon in your search terms to get what you want. It helps to put "R" or "tidyverse" in the search text, or the name of the relevant package, like "ggplot2".

\### Vignettes

Many packages, especially \[tidyverse\](https://www.tidyverse.org/packages/){target="\_blank"} ones, have helpful websites with vignettes explaining how to use their functions. Some of the vignettes are also available inside R. You can access them from a package's help page or with the \`vignette()\` function.

\`\`\`{r, eval = FALSE, filename = "Run in the console"}

\# opens a list of available vignettes

vignette(package = "ggplot2")

\# opens a specific vignette in the Help pane

vignette("ggplot2-specs", package = "ggplot2")

\`\`\`

FROM TUTORIAL #2

R Basics

Function help is always organised in the same way. For example, look at the help for \`?beepr::beep\`. At the top, it tells you the name of the function and its package in curly brackets, then a short description of the function, followed by a longer description. The \*\*Usage\*\* section shows the function with all of its \`r glossary("argument", "arguments")\`. If any of those arguments have default values, they will be shown like \`function(arg = default)\`. The \*\*Arguments\*\* section lists each argument with an explanation. There may be a \*\*Details\*\* section after this with even more detail about the functions. The \*\*Examples\*\* section is last, and shows examples that you can run in your console window to see how the function works.

::: {.callout-note .try style="clear: both;"}
\## Function Help

\- What is the first argument to the \`mean\` function? \`r mcq(c("trim", "na.rm", "mean", answer="x"))\`

\- What package is \`read_excel\` in? \`r mcq(c("readr", answer="readxl", "base", "stats"))\`
:::

\### Arguments

You can look up the arguments/options that a function has by using the help documentation. Some arguments are required, and some are optional. Optional arguments will often use a default (normally specified in the help documentation) if you do not enter any value.

As an example, look at the help documentation for the function \`sample()\` which randomly samples items from a list.

\`\`\`{r help-doc, eval=FALSE, filename = "Run in the console"}

?sample

\`\`\`

The help documentation for \`sample()\` should appear in the bottom right help panel. In the usage section, we see that \`sample()\` takes the following form:

\`\`\`{r arguments, eval = FALSE}

sample(x, size, replace = FALSE, prob = NULL)

\`\`\`

In the arguments section, there are explanations for each of the arguments. \`x\` is the list of items we want to choose from, \`size\` is the number of items we want to choose, \`replace\` is whether or not each item may be selected more than once, and \`prob\` gives the probability that each item is chosen. In the details section it notes that if no values are entered for \`replace\` or \`prob\` it will use defaults of \`FALSE\` (each item can only be chosen once) and \`NULL\` (all items will have equal probability of being chosen). Because there is no default value for \`x\` or \`size\`, they must be specified otherwise the code won't run.

Let's try an example and just change the required arguments to \`x\` and \`size\` to ask R to choose 5 random letters (\`letters\` is a built-in \`r glossary("vector")\` of the 26 lower-case Latin letters).

\`\`\`{r, echo = FALSE}

\# make sure values are the same

set.seed(1242016)

\`\`\`

\`\`\`{r rnorm-n}

sample(x = letters, size = 5)

\`\`\`

::: {.callout-note collapse="true"}
\## Why are my letters different to your letters?

\`sample()\` generates a random sample. Each time you run the code, you'll generate a different set of random letters (try it). The function \`set.seed()\` controls the random number generator - if you're using any functions that use randomness (such as \`sample()\`), running \`set.seed()\` will ensure that you get the same result (in many cases this may not be what you want to do). To get the same numbers we do, run \`set.seed(1242016)\` in the console, and then run \`sample(x = letters, size = 5)\` again.
:::

Now we can change the default value for the \`replace\` argument to produce a set of letters that is allowed to have duplicates.

\`\`\`{r}

set.seed(8675309)

sample(x = letters, size = 5, replace = TRUE)

\`\`\`

This time R has still produced 5 random letters, but now this set of letters has two instances of "k". Always remember to use the help documentation to help you understand what arguments a function requires.

\### Argument names

In the above examples, we have written out the argument names in our code (i.e., \`x\`, \`size\`, \`replace\`), however, this is not strictly necessary. The following two lines of code would both produce the same result (although each time you run \`sample()\` it will produce a slightly different result, because it's random, but they would still work the same):

\`\`\`{r argument-names, eval = FALSE}

sample(x = letters, size = 5, replace = TRUE)

sample(letters, 5, TRUE)

\`\`\`

Importantly, if you do not write out the argument names, R will use the default order of arguments. That is, for \`sample\` it will assume that the first value you enter is \`x\`, the second value is \`size\` and the third value is \`replace\`.

If you write out the argument names, then you can write the arguments in whatever order you like:

\`\`\`{r argument-order, eval = FALSE}

sample(size = 5, replace = TRUE, x = letters)

\`\`\`

When you are first learning R, you may find it useful to write out the argument names as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see code examples online that do not use argument names, so it is important to be able to understand which argument each bit of code is referring to (or look up the help documentation to check).

In this course, we will always write out the argument names the first time we use each function. However, in subsequent uses they may be omitted.

\### Tab auto-complete

One very useful feature of R Studio is tab auto-complete for functions. If you write the name of the function and then press the tab key, R Studio will show you the arguments that function takes along with a brief description. If you press enter on the argument name it will fill in the name for you, just like auto-complete on your phone. This is incredibly useful when you are first learning R and you should remember to use this feature frequently.

\`\`\`{r fig-autocomplete, echo=FALSE, fig.cap="Tab auto-complete"}

#knitr::include_graphics("images/intro/autocomplete.png")

\`\`\`

\## Objects {#sec-objects}

A large part of your coding will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of operations and analyses. You assign content to an object using \`\<-\`.

Run the following code in the console, but change the values of \`name\` and \`age\` to your own details and change \`christmas\` to a holiday or date you care about.

\`\`\`{r objects, filename = "Run in the console"}

name \<- "Emily"

age \<- 36

today \<- Sys.Date()

christmas \<- as.Date("2023-12-25")

\`\`\`

You'll see that four objects now appear in the environment pane:

\- \`name\` is \`r glossary("character")\` (text) data. In order for R to recognise it as text, it \*\*must\*\* be enclosed in double quotation marks \`" "\`.

\- \`age\` is \`r glossary("numeric")\` data. In order for R to recognise this as a number, it \*\*must not\*\* be enclosed in quotation marks.

\- \`today\` stores the result of the function \`Sys.Date()\`. This function returns your computer system's date. Unlike \`name\` and \`age\`, which are hard-coded (i.e., they will always return the values you enter), the contents of the object \`today\` will change dynamically with the date. That is, if you run that function tomorrow, it will update the date to tomorrow's date.

\- \`christmas\` is also a date but it's hard-coded as a specific date. It's wrapped within the \`as.Date()\` function that tells R to interpret the character string you provide as a date rather than text.

::: {.callout-note .try}
To print the contents of an object, type the object's name in the console and press enter. Try printing all four objects now.
:::

Finally, a key concept to understand is that objects can interact and you can save the results of those interactions in new object. Edit and run the following code to create these new objects, and then print the contents of each new object.

\`\`\`{r intro-objects, filename = "Run in the console"}

decade \<- age + 10

full_name \<- paste(name, "Nordmann")

how_long \<- christmas - today

\`\`\`

\## Getting help {#sec-help}

You will feel like you need a \*lot\* of help when you're starting to learn. This won't really go away; it's impossible to memorise everything. The goal is to learn enough about the structure of R that you can look things up quickly. This is why we'll introduce specialised jargon in the glossary for each chapter; it's easier to google "convert \`r glossary("character")\` to \`r glossary("numeric")\` in R" than "make numbers in quotes be actual numbers not words". In addition to the function help described above, here's some additional resources you should use often.

\### Package reference manuals

Start up help in a browser by entering \`help.start()\` in the console. Click on \<if\>Packages\</if\> under \<if\>Reference\</if\> to see a list of packages. Scroll down to the \<pkg\>readxl\</pkg\> package and click on it to see a list of the functions that are available in that package.

\### Googling

If the function help doesn't help, or you're not even sure what function you need, try Googling your question. It will take some practice to be able to use the right jargon in your search terms to get what you want. It helps to put "R" or "tidyverse" in the search text, or the name of the relevant package, like "ggplot2".

\### Vignettes

Many packages, especially \[tidyverse\](https://www.tidyverse.org/packages/){target="\_blank"} ones, have helpful websites with vignettes explaining how to use their functions. Some of the vignettes are also available inside R. You can access them from a package's help page or with the \`vignette()\` function.

\`\`\`{r, eval = FALSE, filename = "Run in the console"}

\# opens a list of available vignettes

vignette(package = "ggplot2")

\# opens a specific vignette in the Help pane

vignette("ggplot2-specs", package = "ggplot2")

\`\`\`

\## Coding Etiquette

https://bookdown.org/daniel_dauber_io/r4np_book/r-basics-the-very-fundamentals.html

Now you know everything to get started, but before we jump into our first project, I would like to briefly touch upon coding etiquette. This is not something that improves your analytical or coding skills directly, but is essential in building good habbits and making your life and those of others a little easier. Consider writing code like growing plants in your garden. You want to nurture the good plants, remove the weed and add labels that tell you which plant it is that you are growing. At the end of the day, you want your garden to be well-maintained. Treat you programming code the same way.

A script (see Chapter 6.3) of programming code should always have at least the following qualities:

Only contains code that is necessary,

Is easy to read and understand,

Is self-contained.

With simple code this is easily achieved. However, what about more complex and longer code representing a whole set of analytical steps?

\`\`\`{r}

\# Very messy code

library(tidyverse)

library(jtools)

model1 \<- lm(covid_cases_per_1m \~ idv, data = df)

summ(model1, scale = TRUE, transform.response = TRUE, vifs = TRUE)

df %\>% ggplot(aes(x = covid_cases_per_1m, y = idv, col = europe, label = country))+

theme_minimal()+ geom_label(nudge_y = 2) + geom_point()

model2 \<- lm(cases_per_1m \~ idv + uai + idv\*europe + uai\*europe, data = df)

summ(model2, scale = TRUE, transform.response = TRUE, vifs = TRUE)

anova(model1, model2)

\`\`\`

How about the following in comparison?

\`\`\`{r}

\# Nicely structured code

\# Load required R packages

library(tidyverse)

library(jtools)

\# \-\-\-- Modelling COVID-19 cases \-\-\--

\## Specify and run a regression

model1 \<- lm(covid_cases_per_1m \~ idv, data = df)

\## Retrieve the summary statistics of model1

summ(model1,

scale = TRUE,

transform.response = TRUE,

vifs = TRUE)

\# Does is matter whether a country lies in Europe?

\## Visualise rel. of covid cases, idv and being a European country

df %\>%

ggplot(aes(x = covid_cases_per_1m,

y = idv,

col = europe,

label = country)) +

theme_minimal() +

geom_label(nudge_y = 2) +

geom_point()

\## Specify and run a revised regression

model2 \<- lm(cases_per_1m \~ idv + uai + idv\*europe + uai\*europe,

data = df)

\## Retrieve the summary statistics of model2

summ(model2,

scale = TRUE,

transform.response = TRUE,

vifs = TRUE)

\## Test whether model2 is an improvement over model1

anova(model1, model2)

\`\`\`

I hope we can agree that the second example is much easier to read and understand even though you probably do not understand most of it yet. For once, I separated the different analytical steps from each other like paragraphs in a report. Apart from that, I added comments with \# to provide more context to my code for someone else who wants to understand my analysis. Admittedly, this example is a little excessive. Usually, you might have fewer comments. Commenting is an integral part of programming because it allows you to remember what you did. Ideally, you want to strike a good balance between commenting on and writing your code. How many comments you need will likely change throughout your R programming journey. Think of comments as headers for your programming script that give it structure.

We can use \# not only to write comments but also to tell R not to run particular code. This is very helpful if you want to keep some code but do not want to use it yet. There is also a handy keyboard shortcut you can use to 'deactivate' multiple lines of code at once. Select whatever you want to 'comment out' in your script and press Ctrl+Shift+C (PC) or Cmd+Shift+C (Mac).

\`\`\`{r}

\# mean(pocket_money) \# R will NOT run this code

mean(pocket_money) \# R will run this code

\`\`\`

RStudio helps a lot with keeping your coding tidy and properly formatted. However, there are some additional aspects worth considering. If you want to find out more about coding style, I highly recommend to read through 'The tidyverse style guide' (Wickham, 2021).
